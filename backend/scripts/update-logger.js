const fs = require('fs').promises;
const path = require('path');
const logger = require('../logging');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
async function updateFile(filePath) {
  try {
    let content = await fs.readFile(filePath, 'utf8');
    let wasUpdated = false;
    
    // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–º–ø–æ—Ä—Ç –Ω–∞ –Ω–æ–≤—ã–π
    if (content.includes("require('../utils/logger')")) {
      content = content.replace(
        /const\s*{\s*log\s*}\s*=\s*require\(['"]\.\.\/utils\/logger['"]\)/g,
        "const { logger } = require('../logging')"
      );
      
      // –ó–∞–º–µ–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ log –Ω–∞ logger —Å —É—á–µ—Ç–æ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      content = content.replace(
        /\blog\.(error|warn|info|debug)\(([^)]+)\)/g,
        (match, level, args) => {
          // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          if (args.includes('metadata:')) {
            return `logger.${level}(${args})`;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
          const hasMultipleArgs = args.includes(',');
          
          if (hasMultipleArgs) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–µ—Ä–≤—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ,
            // –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–º–µ—â–∞–µ–º –≤ metadata
            const [message, ...rest] = args.split(',').map(arg => arg.trim());
            return `logger.${level}(${message}, { metadata: { data: ${rest.join(', ')} } })`;
          }
          
          // –ï—Å–ª–∏ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç, –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º
          return `logger.${level}(${args})`;
        }
      );
      
      // –ó–∞–º–µ–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ this.logger
      content = content.replace(
        /this\.logger\.(error|warn|info|debug)\(([^)]+)\)/g,
        (match, level, args) => {
          if (args.includes('metadata:')) {
            return `logger.${level}(${args})`;
          }
          const hasMultipleArgs = args.includes(',');
          if (hasMultipleArgs) {
            const [message, ...rest] = args.split(',').map(arg => arg.trim());
            return `logger.${level}(${message}, { metadata: { data: ${rest.join(', ')} } })`;
          }
          return `logger.${level}(${args})`;
        }
      );
      
      // –ó–∞–º–µ–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è this.logger
      content = content.replace(
        /this\.logger\s*=\s*require\(['"]\.\.\/utils\/logger['"]\)/g,
        "// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π logger –∏–∑ '../logging'"
      );
      
      await fs.writeFile(filePath, content, 'utf8');
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
      wasUpdated = true;
    }
    
    // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞
    if (!wasUpdated && (
      content.includes('this.logger') || 
      content.includes('logger.') ||
      content.includes('log.')
    )) {
      console.log(`‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é: ${filePath}`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
async function processDirectory(directory) {
  const entries = await fs.readdir(directory, { withFileTypes: true });
  
  for (const entry of entries) {
    const fullPath = path.join(directory, entry.name);
    
    if (entry.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules, .git –∏ logs
      if (entry.name !== 'node_modules' && 
          entry.name !== '.git' && 
          entry.name !== 'logs') {
        await processDirectory(fullPath);
      }
    } else if (entry.isFile() && entry.name.endsWith('.js')) {
      await updateFile(fullPath);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const srcDir = path.join(__dirname, '../src');
  
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –≤ —Ñ–∞–π–ª–∞—Ö...');
    await processDirectory(srcDir);
    console.log('‚ú® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main(); 